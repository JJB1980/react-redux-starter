import { createSlice } from '@reduxjs/toolkit';
// import {Action, ActionCreator, Dispatch} from 'redux';
// import {ThunkAction} from 'redux-thunk';
import { RootState } from '../app/store';
// import { AuthResponse } from 'ag-models';
// import { getApiEndpoints } from 'ag-api';
import { IResponse } from '../index.d';

export const hot = '../api/index.ts';

export interface ApiState {
  appUrl: string;
  endpoints: any;
  status: 'idle' | 'loading' | 'failed';
  error: string;
}

const initialState: ApiState = {
  appUrl: 'https://dev.api35.agunity.com',
  endpoints: {},
  status: 'idle',
  error: ''
};


export const counterSlice = createSlice({
  name: 'api',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    init: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.endpoints = getApiEndpoints(state.appUrl);
    },
    failure: (state, action) => {
      state.error = action.payload;
    },
    status: (state, action) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { init, status, failure } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.api.value)`
export const selectAppUrl = (state: RootState) => state.api.appUrl;

export const selectStatus = (state: RootState) => state.api.status;

const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const callEndpoint = (api: string, method: string, body: any) => async (
  dispatch,
  getState
): Promise<IResponse> => {
  const url = selectAppUrl(getState());
  const options: any = {
    method,
    // mode: 'no-cors',
    headers: { 'Content-Type': 'application/json', Accept: '*/*', 'Content-Encoding': 'gzip, deflate, br' },
    body: JSON.stringify(body)
  };
  console.log('options :::', options);
  try {
    dispatch(status('loading'));
    const response = await fetch(
      `${url}/${api}`,
      options
    );
    await wait(2000);
    const data: any = await response.json();
    const value: IResponse = { status: 'success', data };
    dispatch(status('idle'));
    return value;
  } catch (e) {
    await wait(2000);
    dispatch(failure(e.message));
    dispatch(status('failed'));
    const value: IResponse = { status: 'error', error: e.message };
    return value;
  }
};

export default counterSlice.reducer;
