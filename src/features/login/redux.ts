import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
// import { AuthResponse } from 'ag-models';
import { ThunkArgs, IResponse } from '../../index.d';

export const hot = '../features/login/redux.ts';

export interface LoginState {
  loggedIn: boolean;
  status: 'idle' | 'loading' | 'failed';
  error: string;
  response: any;
}

const initialState: LoginState = {
  loggedIn: false,
  status: 'idle',
  error: '',
  response: {} as any
};

export const counterSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    login: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.loggedIn = true;
      state.response = action.payload;
    },
    failure: (state, action) => {
      state.loggedIn = false;
      state.error = action.payload;
    },
    status: (state, action) => {
      state.status = action.payload;
    },
    loggedIn: (state) => {
      state.loggedIn = true;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { login, failure, status, loggedIn } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.login.value)`
export const selectIsLoggedIn = (state: RootState) => state.login.loggedIn;

export const selectStatus = (state: RootState) => state.login.status;

export const selectError = (state: RootState) => state.login.error;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const asyncLogin = (username: string, password: string) => async (
  dispatch: Function, _: void, { callEndpoint }: ThunkArgs
): Promise<IResponse> => {
  const response: IResponse = await dispatch(callEndpoint('api/Authenticate/V2.0/Web', 'POST', { username, password }));
  if (response.data) dispatch(login(response.data));
  else dispatch(failure(response.error));
  return response;
};

export default counterSlice.reducer;
